{"ast":null,"code":"var _jsxFileName = \"/home/nmisfit/Desktop/course-work/client/src/pages/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport { Context } from \"../index\";\nimport Square from '../components/Square';\nimport '../css/GameComponents.css';\nimport { createGame, getGamesByUser } from '../http/userAPI';\nimport { calculateWinner, getNextStep, getRandomInt } from './GameUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const {\n    user\n  } = useContext(Context);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [countStep, setCount] = useState(0);\n  const winner = calculateWinner(board);\n  const buttonClick = index => {\n    const boardCopy = [...board];\n    let step = 0;\n    if (winner || boardCopy[index]) return;\n    boardCopy[index] = 'x';\n    step++;\n    const tmpwinner = calculateWinner(boardCopy);\n    if (tmpwinner === null && countStep < 8) {\n      index = getNextStep(boardCopy);\n      boardCopy[index] = 'o';\n      step++;\n    }\n    setCount(countStep + step);\n    setBoard(boardCopy);\n\n    //еще одна проверка на конец игры для записи в таблицу\n    const lasttmpwinner = calculateWinner(boardCopy);\n    if (lasttmpwinner !== null || countStep >= 8) {\n      try {\n        let bwinner = lasttmpwinner === 'x' ? true : false;\n        let time = getRandomInt(2, 30);\n        let data = createGame(bwinner, time, user.id);\n        this.updateGames();\n      } catch (e) {\n        alert(e.response.data.message);\n      }\n    }\n  };\n  const startNewGame = () => {\n    setBoard(Array(9).fill(null));\n    setCount(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"black_back\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      variant: \"outline-light\",\n      className: \"start__btn\",\n      onClick: () => startNewGame(),\n      children: \" NEW GAME\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((square, i) => /*#__PURE__*/_jsxDEV(Square, {\n        value: square,\n        onClick: () => buttonClick(i)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game__info\",\n      children: [\" \", winner ? \"[ WIN \" + winner + \" ! ]\" : countStep === 9 ? \"[ DRAW ! ]\" : \"[ YOU TURN ]\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"FflMNhFP5+8qBE1UJ8fhS6OqGgk=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useContext","useState","Context","Square","createGame","getGamesByUser","calculateWinner","getNextStep","getRandomInt","Game","user","board","setBoard","Array","fill","countStep","setCount","winner","buttonClick","index","boardCopy","step","tmpwinner","lasttmpwinner","bwinner","time","data","id","updateGames","e","alert","response","message","startNewGame","map","square","i"],"sources":["/home/nmisfit/Desktop/course-work/client/src/pages/Game.js"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport {Context} from \"../index\";\nimport Square from '../components/Square';\nimport '../css/GameComponents.css'\nimport { createGame, getGamesByUser } from '../http/userAPI';\nimport { calculateWinner, getNextStep, getRandomInt } from './GameUtils';\n\nconst Game = () => {\n  const { user } = useContext(Context)\n  const [board, setBoard] = useState(Array(9).fill(null))\n  const [countStep, setCount] = useState(0)\n  const winner = calculateWinner(board)\n\n\n  const buttonClick = (index) => {\n    const boardCopy = [...board]\n    let step = 0;\n\n    if (winner || boardCopy[index]) return;\n    boardCopy[index] = 'x'\n    step++\n\n    const tmpwinner = calculateWinner(boardCopy)\n    if (tmpwinner === null && countStep < 8) {\n      index = getNextStep(boardCopy)\n      boardCopy[index] = 'o'\n      step++\n    }\n\n    setCount(countStep + step)\n    setBoard(boardCopy)\n\n    //еще одна проверка на конец игры для записи в таблицу\n    const lasttmpwinner = calculateWinner(boardCopy)\n    if (lasttmpwinner !== null || countStep >= 8){\n      try {\n        let bwinner = lasttmpwinner === 'x' ? true : false;\n        let time = getRandomInt(2, 30);\n        let data = createGame(bwinner, time, user.id)\n        this.updateGames()\n      } catch (e) {\n        alert(e.response.data.message)\n      }\n    }\n  }\n  \n  const startNewGame = () => {\n    setBoard(Array(9).fill(null))\n    setCount(0)\n  }\n\n  return (\n    <div className='black_back'>\n\n      <button\n        variant={\"outline-light\"}\n        className=\"start__btn\"\n        onClick={() => startNewGame()}> NEW GAME</button>\n\n      <div className=\"board\">\n        {\n          board.map((square, i) => (\n            <Square\n              key={i}\n              value={square}\n              onClick={() => buttonClick(i)} />\n          ))\n        }\n      </div>\n\n      <div className='game__info'> {winner ? \"[ WIN \" + winner + \" ! ]\"\n        :\n        (countStep === 9) ? \"[ DRAW ! ]\" : \"[ YOU TURN ]\"} </div>\n    </div>\n  );\n}\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}