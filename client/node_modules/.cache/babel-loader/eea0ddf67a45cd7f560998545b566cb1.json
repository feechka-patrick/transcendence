{"ast":null,"code":"var _jsxFileName = \"/home/nmisfit/Desktop/course-work/client/src/pages/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { Context } from \"../index\";\nimport Square from '../components/Square';\nimport '../css/GameComponents.css';\nimport { createGame, getGamesByUser } from '../http/userAPI';\nimport { calculateWinner, getNextStep, getRandomInt } from './GameUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const {\n    user\n  } = useContext(Context);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [countStep, setCount] = useState(0);\n  const winner = calculateWinner(board);\n\n  const buttonClick = index => {\n    const boardCopy = [...board];\n    let step = 0;\n    if (winner || boardCopy[index]) return;\n    boardCopy[index] = 'x';\n    step++;\n    const tmpwinner = calculateWinner(boardCopy);\n\n    if (tmpwinner === null && countStep < 8) {\n      index = getNextStep(boardCopy);\n      boardCopy[index] = 'o';\n      step++;\n    }\n\n    setCount(countStep + step);\n    setBoard(boardCopy); //еще одна проверка на конец игры для записи в таблицу\n\n    const lasttmpwinner = calculateWinner(boardCopy);\n\n    if (lasttmpwinner !== null || countStep >= 8) {\n      try {\n        let bwinner = lasttmpwinner === 'x' ? true : false;\n        let time = getRandomInt(2, 30);\n        let data = createGame(bwinner, time, user.id);\n        updateGames;\n      } catch (e) {\n        alert(e.response.data.message);\n      }\n    }\n  };\n\n  const updateGames = async () => {\n    try {\n      let data = await getGamesByUser(user.email);\n      let games = [];\n      {\n        data.data.map((game, i) => games.push({\n          winner: game.winner,\n          time: game.time\n        }));\n      }\n      user.setGames(games);\n    } catch (e) {\n      alert(e.response.data.message);\n    }\n  };\n\n  const startNewGame = () => {\n    setBoard(Array(9).fill(null));\n    setCount(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"black_back\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      variant: \"outline-light\",\n      className: \"start__btn\",\n      onClick: () => startNewGame(),\n      children: \" NEW GAME\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((square, i) => /*#__PURE__*/_jsxDEV(Square, {\n        value: square,\n        onClick: () => buttonClick(i)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game__info\",\n      children: [\" \", winner ? \"[ WIN \" + winner + \" ! ]\" : countStep === 9 ? \"[ DRAW ! ]\" : \"[ YOU TURN ]\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"FflMNhFP5+8qBE1UJ8fhS6OqGgk=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/nmisfit/Desktop/course-work/client/src/pages/Game.js"],"names":["React","useContext","useState","Context","Square","createGame","getGamesByUser","calculateWinner","getNextStep","getRandomInt","Game","user","board","setBoard","Array","fill","countStep","setCount","winner","buttonClick","index","boardCopy","step","tmpwinner","lasttmpwinner","bwinner","time","data","id","updateGames","e","alert","response","message","email","games","map","game","i","push","setGames","startNewGame","square"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAAQC,OAAR,QAAsB,UAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAO,2BAAP;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,iBAA3C;AACA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,YAAvC,QAA2D,aAA3D;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAAWV,UAAU,CAACE,OAAD,CAA3B;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACY,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAlC;AACA,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBf,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAMgB,MAAM,GAAGX,eAAe,CAACK,KAAD,CAA9B;;AAGA,QAAMO,WAAW,GAAIC,KAAD,IAAW;AAC7B,UAAMC,SAAS,GAAG,CAAC,GAAGT,KAAJ,CAAlB;AACA,QAAIU,IAAI,GAAG,CAAX;AAEA,QAAIJ,MAAM,IAAIG,SAAS,CAACD,KAAD,CAAvB,EAAgC;AAChCC,IAAAA,SAAS,CAACD,KAAD,CAAT,GAAmB,GAAnB;AACAE,IAAAA,IAAI;AAEJ,UAAMC,SAAS,GAAGhB,eAAe,CAACc,SAAD,CAAjC;;AACA,QAAIE,SAAS,KAAK,IAAd,IAAsBP,SAAS,GAAG,CAAtC,EAAyC;AACvCI,MAAAA,KAAK,GAAGZ,WAAW,CAACa,SAAD,CAAnB;AACAA,MAAAA,SAAS,CAACD,KAAD,CAAT,GAAmB,GAAnB;AACAE,MAAAA,IAAI;AACL;;AAEDL,IAAAA,QAAQ,CAACD,SAAS,GAAGM,IAAb,CAAR;AACAT,IAAAA,QAAQ,CAACQ,SAAD,CAAR,CAhB6B,CAkB7B;;AACA,UAAMG,aAAa,GAAGjB,eAAe,CAACc,SAAD,CAArC;;AACA,QAAIG,aAAa,KAAK,IAAlB,IAA0BR,SAAS,IAAI,CAA3C,EAA6C;AAC3C,UAAI;AACF,YAAIS,OAAO,GAAGD,aAAa,KAAK,GAAlB,GAAwB,IAAxB,GAA+B,KAA7C;AACA,YAAIE,IAAI,GAAGjB,YAAY,CAAC,CAAD,EAAI,EAAJ,CAAvB;AACA,YAAIkB,IAAI,GAAGtB,UAAU,CAACoB,OAAD,EAAUC,IAAV,EAAgBf,IAAI,CAACiB,EAArB,CAArB;AACAC,QAAAA,WAAW;AACZ,OALD,CAKE,OAAOC,CAAP,EAAU;AACVC,QAAAA,KAAK,CAACD,CAAC,CAACE,QAAF,CAAWL,IAAX,CAAgBM,OAAjB,CAAL;AACD;AACF;AACF,GA9BD;;AAgCA,QAAMJ,WAAW,GAAG,YAAY;AAChC,QAAI;AACH,UAAIF,IAAI,GAAG,MAAMrB,cAAc,CAACK,IAAI,CAACuB,KAAN,CAA/B;AAEA,UAAIC,KAAK,GAAG,EAAZ;AACA;AAACR,QAAAA,IAAI,CAACA,IAAL,CAAUS,GAAV,CAAc,CAACC,IAAD,EAAOC,CAAP,KACdH,KAAK,CAACI,IAAN,CAAW;AAACrB,UAAAA,MAAM,EAAEmB,IAAI,CAACnB,MAAd;AAAsBQ,UAAAA,IAAI,EAAEW,IAAI,CAACX;AAAjC,SAAX,CADA;AAEC;AACFf,MAAAA,IAAI,CAAC6B,QAAL,CAAcL,KAAd;AACA,KARD,CAQE,OAAOL,CAAP,EAAU;AACXC,MAAAA,KAAK,CAACD,CAAC,CAACE,QAAF,CAAWL,IAAX,CAAgBM,OAAjB,CAAL;AACA;AACD,GAZA;;AAcA,QAAMQ,YAAY,GAAG,MAAM;AACzB5B,IAAAA,QAAQ,CAACC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAR;AACAE,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BAEE;AACE,MAAA,OAAO,EAAE,eADX;AAEE,MAAA,SAAS,EAAC,YAFZ;AAGE,MAAA,OAAO,EAAE,MAAMwB,YAAY,EAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,gBAEI7B,KAAK,CAACwB,GAAN,CAAU,CAACM,MAAD,EAASJ,CAAT,kBACR,QAAC,MAAD;AAEE,QAAA,KAAK,EAAEI,MAFT;AAGE,QAAA,OAAO,EAAE,MAAMvB,WAAW,CAACmB,CAAD;AAH5B,SACOA,CADP;AAAA;AAAA;AAAA;AAAA,cADF;AAFJ;AAAA;AAAA;AAAA;AAAA,YAPF,eAkBE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,sBAA8BpB,MAAM,GAAG,WAAWA,MAAX,GAAoB,MAAvB,GAEjCF,SAAS,KAAK,CAAf,GAAoB,YAApB,GAAmC,cAFrC;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CAlFD;;GAAMN,I;;KAAAA,I;AAoFN,eAAeA,IAAf","sourcesContent":["import React, { useContext, useState } from 'react';\nimport {Context} from \"../index\";\nimport Square from '../components/Square';\nimport '../css/GameComponents.css'\nimport { createGame, getGamesByUser } from '../http/userAPI';\nimport { calculateWinner, getNextStep, getRandomInt } from './GameUtils';\n\nconst Game = () => {\n  const { user } = useContext(Context)\n  const [board, setBoard] = useState(Array(9).fill(null))\n  const [countStep, setCount] = useState(0)\n  const winner = calculateWinner(board)\n\n\n  const buttonClick = (index) => {\n    const boardCopy = [...board]\n    let step = 0;\n\n    if (winner || boardCopy[index]) return;\n    boardCopy[index] = 'x'\n    step++\n\n    const tmpwinner = calculateWinner(boardCopy)\n    if (tmpwinner === null && countStep < 8) {\n      index = getNextStep(boardCopy)\n      boardCopy[index] = 'o'\n      step++\n    }\n\n    setCount(countStep + step)\n    setBoard(boardCopy)\n\n    //еще одна проверка на конец игры для записи в таблицу\n    const lasttmpwinner = calculateWinner(boardCopy)\n    if (lasttmpwinner !== null || countStep >= 8){\n      try {\n        let bwinner = lasttmpwinner === 'x' ? true : false;\n        let time = getRandomInt(2, 30);\n        let data = createGame(bwinner, time, user.id)\n        updateGames\n      } catch (e) {\n        alert(e.response.data.message)\n      }\n    }\n  }\n\n  const updateGames = async () => {\n\t\ttry {\n\t\t\tlet data = await getGamesByUser(user.email)\n\n\t\t\tlet games = []\n\t\t\t{data.data.map((game, i) =>\n\t\t\t\tgames.push({winner: game.winner, time: game.time})\n\t\t\t)}\n\t\t\tuser.setGames(games)\n\t\t} catch (e) {\n\t\t\talert(e.response.data.message)\n\t\t}\n\t}\n\n  const startNewGame = () => {\n    setBoard(Array(9).fill(null))\n    setCount(0)\n  }\n\n  return (\n    <div className='black_back'>\n\n      <button\n        variant={\"outline-light\"}\n        className=\"start__btn\"\n        onClick={() => startNewGame()}> NEW GAME</button>\n\n      <div className=\"board\">\n        {\n          board.map((square, i) => (\n            <Square\n              key={i}\n              value={square}\n              onClick={() => buttonClick(i)} />\n          ))\n        }\n      </div>\n\n      <div className='game__info'> {winner ? \"[ WIN \" + winner + \" ! ]\"\n        :\n        (countStep === 9) ? \"[ DRAW ! ]\" : \"[ YOU TURN ]\"} </div>\n    </div>\n  );\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}