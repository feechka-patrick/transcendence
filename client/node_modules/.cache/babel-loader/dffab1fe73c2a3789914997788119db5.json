{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useValidation = (value, validations) => {\n  _s();\n  const [isEmpty, setEmpty] = useState(true);\n  const [minLengthError, setMinLengthError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [inputValid, setInputValid] = useState(false);\n  useEffect(() => {\n    for (const validation in validations) {\n      switch (validation) {\n        case 'minLength':\n          value.length < validations[validation] ? setMinLengthError(true) : setMinLengthError(false);\n          break;\n        case 'isEmpty':\n          value ? setEmpty(false) : setEmpty(true);\n          break;\n        case 'isEmail':\n          const re = /\\S+@\\S+\\.\\S+/;\n          re.test(String(value).toLowerCase()) ? setEmailError(false) : setEmailError(true);\n          break;\n      }\n    }\n  }, [value]);\n  useEffect(() => {\n    if (isEmpty || minLengthError || emailError) setInputValid(false);else {\n      setInputValid(true);\n    }\n  }, [isEmpty, minLengthError, emailError]);\n  return {\n    isEmpty,\n    minLengthError,\n    emailError,\n    inputValid\n  };\n};\n_s(useValidation, \"L/bdn5W5lRlZjjvbLdxGi1Ayzmw=\");\nexport const useInput = (initialValue, validations) => {\n  _s2();\n  const [value, setValue] = useState(initialValue);\n  const [isDirty, setDirty] = useState(false);\n  const valid = useValidation(value, validations);\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n  const onBlur = e => {\n    setDirty(true);\n  };\n  return {\n    value,\n    onChange,\n    onBlur,\n    isDirty,\n    ...valid\n  };\n};\n_s2(useInput, \"ROXCByPZsuh/SPOaQe5dG6oyq/A=\", false, function () {\n  return [useValidation];\n});\nconst Validation = () => {};\n_c = Validation;\nexport default Validation;\nvar _c;\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"names":["useState","useEffect","useValidation","value","validations","isEmpty","setEmpty","minLengthError","setMinLengthError","emailError","setEmailError","inputValid","setInputValid","validation","length","re","test","String","toLowerCase","useInput","initialValue","setValue","isDirty","setDirty","valid","onChange","e","target","onBlur","Validation"],"sources":["/home/nmisfit/Desktop/course-work/client/src/components/Validation.js"],"sourcesContent":["import {useState, useEffect } from 'react';\n\nexport const useValidation = (value, validations) => {\n    const [isEmpty, setEmpty] = useState(true)\n    const [minLengthError, setMinLengthError] = useState(false)\n    const [emailError, setEmailError] = useState(false)\n    const [inputValid, setInputValid] = useState(false)\n\n\n    useEffect( () => {\n        for (const validation in validations) {\n            switch (validation) {\n                case 'minLength':\n                    value.length < validations[validation] ? setMinLengthError(true) : setMinLengthError(false)\n                    break;\n                case 'isEmpty':\n                    value ? setEmpty(false) : setEmpty(true)\n                    break;\n                case 'isEmail':\n                    const re = /\\S+@\\S+\\.\\S+/;\n                    re.test(String(value).toLowerCase()) ? setEmailError(false) : setEmailError(true)\n                    break;\n            }\n        }\n    }, [value])\n\n    useEffect(() => {\n        if (isEmpty || minLengthError || emailError)\n            setInputValid(false)\n        else {\n                setInputValid(true)\n            }\n    }, [isEmpty, minLengthError, emailError])\n\n    return {\n        isEmpty,\n        minLengthError,\n        emailError,\n        inputValid\n    }\n}\n\nexport const useInput = (initialValue, validations) => {\n    const [value, setValue] = useState(initialValue)\n    const [isDirty, setDirty] = useState(false)\n    const valid = useValidation(value, validations)\n\n    const onChange = (e) => {\n        setValue(e.target.value)\n    }\n\n    const onBlur = (e) => {\n        setDirty(true)\n    }\n\n    return {\n        value,\n        onChange,\n        onBlur,\n        isDirty,\n        ...valid\n    }\n}\nconst Validation = () => {\n    \n}\n\nexport default Validation;"],"mappings":";;AAAA,SAAQA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE1C,OAAO,MAAMC,aAAa,GAAG,CAACC,KAAK,EAAEC,WAAW,KAAK;EAAA;EACjD,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAGnDC,SAAS,CAAE,MAAM;IACb,KAAK,MAAMY,UAAU,IAAIT,WAAW,EAAE;MAClC,QAAQS,UAAU;QACd,KAAK,WAAW;UACZV,KAAK,CAACW,MAAM,GAAGV,WAAW,CAACS,UAAU,CAAC,GAAGL,iBAAiB,CAAC,IAAI,CAAC,GAAGA,iBAAiB,CAAC,KAAK,CAAC;UAC3F;QACJ,KAAK,SAAS;UACVL,KAAK,GAAGG,QAAQ,CAAC,KAAK,CAAC,GAAGA,QAAQ,CAAC,IAAI,CAAC;UACxC;QACJ,KAAK,SAAS;UACV,MAAMS,EAAE,GAAG,cAAc;UACzBA,EAAE,CAACC,IAAI,CAACC,MAAM,CAACd,KAAK,CAAC,CAACe,WAAW,EAAE,CAAC,GAAGR,aAAa,CAAC,KAAK,CAAC,GAAGA,aAAa,CAAC,IAAI,CAAC;UACjF;MAAM;IAElB;EACJ,CAAC,EAAE,CAACP,KAAK,CAAC,CAAC;EAEXF,SAAS,CAAC,MAAM;IACZ,IAAII,OAAO,IAAIE,cAAc,IAAIE,UAAU,EACvCG,aAAa,CAAC,KAAK,CAAC,MACnB;MACGA,aAAa,CAAC,IAAI,CAAC;IACvB;EACR,CAAC,EAAE,CAACP,OAAO,EAAEE,cAAc,EAAEE,UAAU,CAAC,CAAC;EAEzC,OAAO;IACHJ,OAAO;IACPE,cAAc;IACdE,UAAU;IACVE;EACJ,CAAC;AACL,CAAC;AAAA,GAtCYT,aAAa;AAwC1B,OAAO,MAAMiB,QAAQ,GAAG,CAACC,YAAY,EAAEhB,WAAW,KAAK;EAAA;EACnD,MAAM,CAACD,KAAK,EAAEkB,QAAQ,CAAC,GAAGrB,QAAQ,CAACoB,YAAY,CAAC;EAChD,MAAM,CAACE,OAAO,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAMwB,KAAK,GAAGtB,aAAa,CAACC,KAAK,EAAEC,WAAW,CAAC;EAE/C,MAAMqB,QAAQ,GAAIC,CAAC,IAAK;IACpBL,QAAQ,CAACK,CAAC,CAACC,MAAM,CAACxB,KAAK,CAAC;EAC5B,CAAC;EAED,MAAMyB,MAAM,GAAIF,CAAC,IAAK;IAClBH,QAAQ,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,OAAO;IACHpB,KAAK;IACLsB,QAAQ;IACRG,MAAM;IACNN,OAAO;IACP,GAAGE;EACP,CAAC;AACL,CAAC;AAAA,IApBYL,QAAQ;EAAA,QAGHjB,aAAa;AAAA;AAkB/B,MAAM2B,UAAU,GAAG,MAAM,CAEzB,CAAC;AAAA,KAFKA,UAAU;AAIhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module"}